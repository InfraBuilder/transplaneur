#!/bin/bash

# Default debug level
export DEBUG_LEVEL=${DEBUG_LEVEL:-2}          

# Default period to wait for configuration
export WAIT_CONFIG_PERIOD=${WAIT_CONFIG_PERIOD:-5}

# Default wireguard interface name
export WIREGUARD_INTERFACE=${WIREGUARD_INTERFACE:-wg0}

export TRANSPLANEUR_RUN_DIR=/var/run/transplaneur

#===/ Utility functions \======================================================

# Trick to no depend on locale (do not remove)
export LC_ALL=C

function logdate { date "+%Y-%m-%d %H:%M:%S"; }
function fatal { echo "$(logdate) [FATAL] $@" >&2; exit 1; }
function err { echo "$(logdate) [ERROR] $@" >&2; }
function warn { [ $DEBUG_LEVEL -ge 1 ] && echo "$(logdate) [WARNING] $@" >&2; }
function info { [ $DEBUG_LEVEL -ge 2 ] && echo "$(logdate) [INFO] $@" >&2; }
function debug { [ $DEBUG_LEVEL -ge 3 ] && echo "$(logdate) [DEBUG] $@" >&2; }
function now { date +%s; }

#===/ Configuration \===========================================================

# Prepare the networking environment
info "Ensure that IP forwarding is enabled"
sysctl -w net.ipv4.ip_forward=1 || fatal "Cannot enable IP forwarding (net.ipv4.ip_forward=1)"

export FILES_TO_CLEAN="local-gateway vpn-public-ip vpn-endpoint-ip cluster-pod-cidr cluster-svc-cidr"

# Clean potential remaining files from previous run
for i in $FILES_TO_CLEAN; do
    if [ -e ${TRANSPLANEUR_RUN_DIR}/$i ]; then
        info "Cleaning previous file $i, probably because of previous unexpected stop"
        rm ${TRANSPLANEUR_RUN_DIR}/$i
    fi
done

#===============================================================================

function checkVpnConnection {
    ping -c 1 -W 1 -w 1 -q $VPN_ENDPOINT_IP > /dev/null
}

function startVpn {
    # Wait for the wireguard configuration to be available
    while [ ! -r ${TRANSPLANEUR_RUN_DIR}/${WIREGUARD_INTERFACE}.conf ]; do
        warn "Waiting for wireguard configuration to be available ..."
        sleep ${WAIT_CONFIG_PERIOD}
    done

    # Retrieve the wireguard configuration
    info "Copying wireguard configuration"
    cp ${TRANSPLANEUR_RUN_DIR}/${WIREGUARD_INTERFACE}.conf /etc/wireguard/${WIREGUARD_INTERFACE}.conf

    # Start the wireguard interface
    info "Starting wireguard interface"
    wg-quick up ${WIREGUARD_INTERFACE} || { err "Cannot start wireguard interface, please check configuration"; return 1; }

    # Configure NAT
    info "Configuring NAT"
    iptables -A FORWARD -j ACCEPT
    iptables -t nat -A POSTROUTING -o ${WIREGUARD_INTERFACE} -j MASQUERADE

    # Detecting VPN endpoint IP
    info "Detecting VPN endpoint IP"
    VPN_ENDPOINT_IP=$(ip r show dev ${WIREGUARD_INTERFACE} scope link)
    echo $VPN_ENDPOINT_IP> ${TRANSPLANEUR_RUN_DIR}/vpn-endpoint-ip

    checkVpnConnection || { err "Cannot reach VPN endpoint, please check configuration"; return 1; }

    # Detecting new egress public IP
    info "Detecting new egress public IP"
    VPN_PUBLIC_IP=$(curl -s ifconfig.io)
    echo $VPN_PUBLIC_IP > ${TRANSPLANEUR_RUN_DIR}/vpn-public-ip

    [ "$VPN_PUBLIC_IP" = "" ] && { err "Cannot detect new egress public IP, does endpoint have internet access ? please check configuration"; return 1; }

    echo $CLUSTER_POD_CIDR > ${TRANSPLANEUR_RUN_DIR}/cluster-pod-cidr
    echo $CLUSTER_SVC_CIDR > ${TRANSPLANEUR_RUN_DIR}/cluster-svc-cidr

    # Declare the local gateway
    info "Declare the local gateway"
    echo $MY_POD_IP > ${TRANSPLANEUR_RUN_DIR}/local-gateway
}

function stopVpn {
    # Stopping wireguard
    info "Stopping wireguard interface"

    wg-quick down wg0

    # Clean NAT
    info "Cleaning NAT"
    iptables -D FORWARD -j ACCEPT
    iptables -t nat -D POSTROUTING -o %i -j MASQUERADE

    # Clean files
    for i in $FILES_TO_CLEAN; do
        if [ -e ${TRANSPLANEUR_RUN_DIR}/$i ]; then
            info "Cleaning file $i"
            rm ${TRANSPLANEUR_RUN_DIR}/$i
        fi
    done
}

#===/ Signal handling \=========================================================

# Trap handler to stop wireguard
function trapHandlerStop { 
    info "Signal $1 detected, stopping wireguard interface"

    stopVpn 

    # Exit with success
    exit 0
}

function trapHandlerReload {
    info "Signal $1 detected, reloading wireguard interface"

    stopVpn
    startVpn
}

# Catching Signals
info "Wireguard interface is up, catching signals to stop wireguard"
for i in SIGTERM SIGINT SIGKILL SIGQUIT SIGSTOP SIGABRT; do
    trap "trapHandlerStop $i" $i
done

# Handling reload
trap "trapHandlerReload SIGHUP" SIGHUP

#==================================

# Start wireguard
startVpn

while true; do
    if ! checkVpnConnection; then
        warn "VPN connection is down, restarting wireguard interface"
        stopVpn
        startVpn
    fi
    sleep 1
done
